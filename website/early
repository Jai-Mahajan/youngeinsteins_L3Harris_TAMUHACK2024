<!-- mathematics.html -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>YoungEinsteins - Mathematics</title>
    <style>
      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        background-color: #f5f5f5;
        color: #333;
      }

      header {
        text-align: center;
        padding: 30px;
        background-color: #3498db;
        color: #fff;
      }

      nav {
        display: flex;
        justify-content: center;
        background-color: #0c4870;
        padding: 10px 0;
      }

      .dropdown {
        position: relative;
        display: inline-block;
      }

      .dropdown-content {
        display: none;
        position: absolute;
        background-color: #3498db;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        border-radius: 5px;
        z-index: 1;
      }

      .dropdown:hover .dropdown-content {
        display: block;
      }

      .dropdown-content a {
        color: #fff;
        padding: 10px;
        text-decoration: none;
        display: block;
      }

      nav a {
        color: #fff;
        text-decoration: none;
        padding: 10px 20px;
        margin: 0 10px;
        border-radius: 5px;
        transition: background-color 0.3s;
        position: relative;
      }

      nav a:hover {
        background-color: #3498db;
      }

      main {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
      }

      h1,
      h2 {
        color: #3498db;
      }

      p {
        line-height: 1.6;
      }

      footer {
        text-align: center;
        padding: 10px;
        background-color: #3498db;
        color: #fff;
        position: fixed;
        bottom: 0;
        width: 100%;
      }
    </style>
  </head>
  <body>
    <header>
      <h1>YoungEinsteins</h1>
    </header>
    <nav>
      <div class="dropdown">
        <a href="#">Mathematics</a>
        <div class="dropdown-content">
          <a href="#">Early Elementary</a>
          <a href="#">Late Elementary</a>
          <a href="#">Pre-Algebra</a>
        </div>
      </div>
      <a href="index.html">Home</a>
      <a href="science.html">Science</a>
      <a href="technology.html">Technology</a>
      <a href="engineering.html">Engineering</a>
      <a href="profile.html">Profile</a>
    </nav>
    <main>
      <h2 style="color: #f759da">Mathematics Section</h2>
      <p>
        Welcome to the Mathematics category. Find out what's new in the math
        category!
      </p>
      <!-- Add more content specific to the Mathematics category as needed -->
      <!-- Add an ID to the image for handling the click event -->
      <img
        id="gameImage"
        src="https://cdn.glitch.global/b2ca45b4-2aeb-46e5-8f83-96f495e59d3a/Purple%20Futuristic%20Game%20Youtube%20Thumbnail.png?v=1706456169280"
        alt="Mathematics Image"
        style="width: 100%; max-height: 300px; object-fit: cover; cursor: pointer;"
      />
      <p>Click on the game above to play!</p>
    </main>
    <footer>
      <p>&copy; 2024 TAMUHACK. All rights reserved.</p>
    </footer>
    <!-- Script to handle the click event and execute the Python code -->
    <script>
      document.getElementById("gameImage").addEventListener("click", function () {
        import pygame
import random

# Initialize Pygame
pygame.init()

# Set up the screen
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Simple Addition Game")

# Define colors
BACKGROUND_COLOR = (12, 72, 112)
TEXT_COLOR = (247, 89, 218)
GREEN = (0, 128, 0)
RED = (255, 0, 0)

# Define fonts
font = pygame.font.Font(None, 64)

# Define apple image
apple_img = pygame.image.load("C:\\Users\\midde\\OneDrive\\Desktop\\red-apple-cartoon-png.png")
apple_img = pygame.transform.scale(apple_img, (50, 50))

# Function to generate a random addition problem
def generate_problem():
    num1 = random.randint(1, 9)
    num2 = random.randint(1, 9)
    return num1, num2

# Function to render apples for a number
def render_apples(number, x, y):
    for i in range(number):
        screen.blit(apple_img, (x, y + i * 60))

# Main game loop
def main():
    clock = pygame.time.Clock()
    running = True
    apples_mode = False
    problem = generate_problem()
    answer = ""
    consecutive_wrong_attempts = 0

    while running:
        screen.fill(BACKGROUND_COLOR)

        if apples_mode:
            num1, num2 = problem
            render_apples(num1, WIDTH // 4 - 50, HEIGHT // 4 - 100)
            plus_sign = font.render('+', True, TEXT_COLOR)
            plus_sign_rect = plus_sign.get_rect(center=(WIDTH // 2, HEIGHT // 4))
            screen.blit(plus_sign, plus_sign_rect)
            render_apples(num2, WIDTH * 3 // 4 - 50, HEIGHT // 4 - 100)
        else:
            num1, num2 = problem
            text = font.render(f"What is {num1} + {num2}?", True, TEXT_COLOR)  # Set text color
            text_rect = text.get_rect(center=(WIDTH//2, HEIGHT//2 - 150))  # Adjust y-coordinate
            screen.blit(text, text_rect)

        # Get user input
        input_rect = pygame.Rect(WIDTH//2 - 100, HEIGHT//2 + 50, 200, 50)
        pygame.draw.rect(screen, TEXT_COLOR, input_rect, 2)  # Set input box color

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    try:
                        if int(answer) == num1 + num2:
                            result_text = font.render("Correct!", True, GREEN)  # Set result text color
                            consecutive_wrong_attempts = 0  # Reset consecutive wrong attempts
                        else:
                            result_text = font.render("Incorrect!", True, RED)  # Set result text color
                            consecutive_wrong_attempts += 1
                            if consecutive_wrong_attempts >= 2:
                                apples_mode = True  # Activate apples mode
                        result_rect = result_text.get_rect(center=(WIDTH//2, HEIGHT//2 + 150))
                        screen.blit(result_text, result_rect)
                        pygame.display.flip()
                        pygame.time.delay(1500)  # Pause for 1.5 seconds
                    except ValueError:
                        pass
                    problem = generate_problem()  # Generate new problem
                    answer = ""  # Reset answer
                elif event.key == pygame.K_BACKSPACE:
                    answer = answer[:-1]
                elif event.unicode.isdigit():
                    answer += event.unicode

        # Render user input
        input_text = font.render(answer, True, TEXT_COLOR)  # Set input text color
        input_text_rect = input_text.get_rect(center=input_rect.center)
        screen.blit(input_text, input_text_rect)

        pygame.display.flip()
        clock.tick(30)

    pygame.quit()

if __name__ == "__main__":
    main()

        alert("Python code execution triggered!");
        // Note: To execute Python code, you'll need a server-side environment.
        // You can use technologies like Flask or Django for Python web development.
      });
    </script>
  </body>
</html>
